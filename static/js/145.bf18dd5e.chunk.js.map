{"version":3,"sources":["views/apps/chat/store/actions/index.js","views/apps/chat/Chat.js","views/apps/chat/SidebarLeft.js","views/apps/chat/GroupSidebar.js","views/apps/chat/index.js"],"names":["getGroups","emp_id","console","log","dispatch","axios","get","config","app","ApiUrl","then","res","type","data","selectChat","id","ChatLog","props","handleUser","handleUserSidebarRight","handleSidebar","store","selectedUser","userSidebarLeft","selectedGroup","chatArea","useRef","useDispatch","useState","msg","setMsg","useEffect","Object","keys","length","ReactDOM","findDOMNode","current","scrollTop","Number","MAX_SAFE_INTEGER","handleSendMsg","e","preventDefault","obj","userData","JSON","parse","localStorage","getItem","senderId","sender_name","name","group_id","message","post","changeHandler","event","formData","FormData","append","target","files","File","sendFile","ChatWrapper","chat","PerfectScrollbar","className","classnames","onClick","size","ref","options","wheelPropagation","chatLog","formattedChatLog","chatMessageSenderId","undefined","msgGroup","messages","forEach","index","push","file","time","createdAt","formattedChatData","map","item","user","side","CardLink","href","serverApi","title","split","pop","src","Form","onSubmit","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","value","onChange","placeholder","Label","for","hidden","Button","color","SidebarLeft","setMainSidebar","sidebar","handleUserSidebarLeft","handleTaskSidebar","userProfile","active","setActive","show","Card","img","avatar","status","imgHeight","imgWidth","role","group","GroupSidebar","companyBrandStaff","open","companyList","brandOptions","label","currentCompany","setCurrentCompany","currentBrand","setCurrentBrand","assignee","setAssignee","getEmployeeData","brand","company","a","response","catch","err","ModalHeader","children","important","setImportant","Modal","isOpen","toggle","contentClassName","modalClassName","errors","newStaff","create","ModalBody","FormGroup","required","isClearable","classNamePrefix","isMulti","theme","selectThemeColors","components","Option","Media","body","outline","AppChat","useSelector","state","openTaskSidebar","setOpenTaskSidebar","setUser","setSidebar","userSidebarRight","setUserSidebarRight","setUserSidebarLeft","Chat"],"mappings":"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","file":"static/js/145.bf18dd5e.chunk.js","sourcesContent":["import axios from 'axios'\nimport config from '../../../../../configs/themeConfig'\n\nexport const getUserProfile = () => {\n  return dispatch => {\n    return axios.get('/apps/chat/users/profile-user').then(res => {\n      console.log(res.data)\n      return dispatch({\n        // type: 'GET_GROUPS',\n        // getGroups: res.data\n      })\n    })\n  }\n}\nexport const getGroups = (emp_id) => {\n  console.log(emp_id)\n  return dispatch => {\n    axios.get(`${config.app.ApiUrl}/group/${emp_id}`).then(res => {\n      dispatch({\n        type: 'GET_GROUPS',\n        getGroups: res.data.data\n      })\n    })\n  }\n}\nexport const getBrandOptions = id => {\n  return async dispatch => {\n    await axios\n      .get(`${config.app.ApiUrl}/brand/names`)\n      .then(response => {\n        dispatch({\n          type: 'BRAND_OPTIONS',\n          brandOptions: response.data.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n} \nexport const selectChat = id => {\n  return dispatch => {\n    axios.get(`${config.app.ApiUrl}/chat/${id}`, id).then(res => {\n      dispatch({ type: 'SELECTED_GROUP', data: id })\n      dispatch({ type: 'SELECT_CHAT', data: res.data.data[0] })\n    })\n  }\n} \n \nexport const sendMsg = (obj) => {\n  return dispatch => {\n    axios.post(`${config.app.ApiUrl}/chat`, obj).then(res => {\n      // dispatch({ type: 'SEND_MSG', data: res.data })\n      dispatch(selectChat(obj.group_id))\n    })\n  }\n} \nexport const sendFile = (File, selectedGroup) => {\n  return dispatch => {\n    axios.post(`${config.app.ApiUrl}/upload/image/`, File).then(res => {\n      // dispatch({ type: 'SEND_MSG', data: res.data })\n      dispatch(selectChat(selectedGroup))\n    })\n  }\n} \n\n\n//=======================\n\nexport const getCompanyList = id => {\n  return async dispatch => {\n    await axios\n      .get(`${config.app.ApiUrl}/company/names`)\n      .then(response => {\n        dispatch({\n          type: 'GET_COMPANY_LIST',\n          companyList: response.data.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n} \n\nexport const create = (data) => {\n  return async dispatch => {\n    await axios\n      .post(`${config.app.ApiUrl}/group`, data)\n      .then(response => {\n        dispatch({\n          type: 'NEW_GROUP',\n          newStaff: response.data\n        })\n        dispatch(getGroups())\n      })\n      .catch(err => console.log(err))\n  }\n} \n\nexport const getCompanyBrandEmployees = (data) => {\n  return async dispatch => {\n    await axios\n      .post(`${config.app.ApiUrl}/staff/company-brand`, data)\n      .then(response => {\n        dispatch({\n          type: 'COMPANY_STAFF',\n          companyBrandStaff: response.data.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}","// ** React Imports\nimport { useState, useEffect, useRef } from 'react'\nimport ReactDOM from 'react-dom'\nimport config from '../../../configs/themeConfig'\n \n// ** Store & Actions\nimport { useDispatch } from 'react-redux'\nimport { sendMsg, sendFile } from './store/actions'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport {  Menu, Mic, Image, Send, File } from 'react-feather'\nimport {\n  CardLink,\n  Form,\n  Label,\n  InputGroup,\n  InputGroupAddon,\n  Input,\n  InputGroupText,\n  Button\n} from 'reactstrap'\nconst ChatLog = props => {\n  const { handleUser, handleUserSidebarRight, handleSidebar, store, userSidebarLeft } = props\n  const { selectedUser, selectedGroup } = store\n  const chatArea = useRef(null)\n  const dispatch = useDispatch()\n  const [msg, setMsg] = useState('')\n  const scrollToBottom = () => {\n    const chatContainer = ReactDOM.findDOMNode(chatArea.current)\n    chatContainer.scrollTop = Number.MAX_SAFE_INTEGER\n  }\n  useEffect(() => {\n    const selectedUserLen = Object.keys(selectedUser).length\n    if (selectedUserLen) {\n      scrollToBottom()\n    }\n  }, [selectedUser])\n\n  const formattedChatData = () => {\n    let chatLog = []\n    if (selectedUser.chat) {\n      chatLog = selectedUser.chat\n    }\n\n    const formattedChatLog = []\n    let chatMessageSenderId = chatLog[0] ? chatLog[0].senderId : undefined\n    let msgGroup = {\n      senderId: chatMessageSenderId,\n      messages: []\n    }\n    chatLog.forEach((msg, index) => {\n      if (chatMessageSenderId === msg.senderId) {\n        msgGroup.messages.push({\n          msg: msg.message,\n          file: msg.file,\n          time: msg.createdAt\n        })\n      } else {\n        chatMessageSenderId = msg.senderId\n        formattedChatLog.push(msgGroup)\n        msgGroup = {\n          senderId: msg.senderId,\n          messages: [\n            {\n              msg: msg.message,\n              file: msg.file,\n              time: msg.createdAt\n            }\n          ]\n        }\n      }\n      if (index === chatLog.length - 1) formattedChatLog.push(msgGroup)\n    })\n    return formattedChatLog\n  }\n  const renderChats = () => {\n    return formattedChatData().map((item, index) => {\n      const user = JSON.parse(localStorage.getItem('userData'))[0]\n      const side = (item.senderId === user.id) ? \"chat-right\" : \"chat-left\"\n      \n      return (\n        <div\n          key={index}\n          className={side}\n        > \n          <div className='chat-body'>\n            {item.messages.map(chat => ( \n              <div key={chat.msg} className='chat-content'>\n                <p>{chat.msg}</p>\n                {chat.file ? <CardLink  href={`${config.app.serverApi}/images/${chat.file}`} target=\"_blank\" title=\"View file\" >\n                  {((chat.file).split('.').pop() === 'jpeg' || (chat.file).split('.').pop() === 'jpg' || (chat.file).split('.').pop() === 'png') ? <img src={`${config.app.serverApi}/images/${chat.file}`} className='w-100'/> : <File size={38}/>}\n                </CardLink> : ''}\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    })\n  } \n\n  // ** Sends New Msg\n  const [selectedFile, setSelectedFile] = useState()\n  const handleSendMsg = e => {\n    e.preventDefault()\n    const userData = JSON.parse(localStorage.getItem('userData'))[0]\n    if (msg.length) {\n      dispatch(sendMsg({ senderId:  userData.id, sender_name: userData.name, group_id: selectedGroup, message: msg }))\n      setMsg('')\n    }\n  } \n  const changeHandler = (event) => {\n    event.preventDefault()\n    // setSelectedFile(event.target.files[0])\n    const userData = JSON.parse(localStorage.getItem('userData'))[0]\n    const formData = new FormData()\n    formData.append('image', event.target.files[0])\n    formData.append('senderId', userData.id)\n    formData.append('sender_name', userData.name)\n    formData.append('group_id', selectedGroup)\n    formData.append('msg', msg)\n    dispatch(sendFile(formData, selectedGroup))\n  }\n  const ChatWrapper = Object.keys(selectedUser).length && selectedUser.chat ? PerfectScrollbar : 'div'\n  return (\n    <div className='chat-app-window'>\n        <div className={classnames('active-chat', { 'd-none': selectedUser === null })}>\n          <div className='chat-navbar'>\n            <header className='chat-header'>\n              <div className='d-flex align-items-center'>\n                <div className='sidebar-toggle d-block d-lg-none mr-1' onClick={handleSidebar}>\n                  <Menu size={21} />\n                  <h1>Test</h1>\n                </div>\n              </div>\n            </header>\n          </div>\n\n          <ChatWrapper ref={chatArea} className='user-chats' options={{ wheelPropagation: false }}>\n            {selectedUser.chat ? <div className='chats'>{renderChats()}</div> : null}\n          </ChatWrapper>\n          <Form className='chat-app-form' onSubmit={e => handleSendMsg(e)}>\n            <InputGroup className='input-group-merge mr-1 form-send-message'>\n              <InputGroupAddon addonType='prepend'>\n                <InputGroupText>\n                  <Mic className='cursor-pointer' size={14} />\n                </InputGroupText>\n              </InputGroupAddon>\n              <Input\n                value={msg}\n                onChange={e => setMsg(e.target.value)}\n                placeholder='Type your message or use speech to text'\n              />\n              <InputGroupAddon addonType='append'>\n                <InputGroupText>\n                  <Label className='attachment-icon mb-0' for='attach-doc'>\n                    <Image className='cursor-pointer text-secondary' size={14} />\n                    <input type='file' id='attach-doc' hidden onChange={e => changeHandler(e)}  />\n                  </Label>\n                </InputGroupText>\n              </InputGroupAddon>\n            </InputGroup>\n            <Button className='send' color='primary'>\n              <Send size={14} className='d-lg-none' />\n              <span className='d-none d-lg-block'>Send</span>\n            </Button>\n          </Form>\n        </div>\n    </div>\n  )\n}\n\nexport default ChatLog\n","import { useState } from 'react'\nimport Avatar from '@components/avatar'\nimport { useDispatch } from 'react-redux'\nimport { selectChat } from './store/actions'\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { X, PlusCircle } from 'react-feather'\n\nimport {\n  Card,\n  InputGroup \n} from 'reactstrap'\nconst SidebarLeft = props => {\n  const { setMainSidebar, store, sidebar, handleSidebar, userSidebarLeft, handleUserSidebarLeft, handleTaskSidebar, userData } = props\n  const {userProfile, getGroups } = store\n  const dispatch = useDispatch()\n  const [active, setActive] = useState({})\n  const handleUserClick = (type, id) => {\n    dispatch(selectChat(id))\n    setActive({ type, id })\n    if (sidebar === true) {\n      handleSidebar()\n    }\n  }\n  const renderChats = () => {\n    return getGroups.map(item => {\n      return (\n        <li\n          className={classnames({\n            active: active.type === 'chat' && active.id === item.id\n          })}\n          key={item.id}\n          onClick={() => handleUserClick('chat', item.id)}\n        >\n          <div className='chat-info flex-grow-1'>\n            <h5 className='mb-0'>{item.group} </h5>\n          </div>\n        </li>\n      )\n    })\n  }\n  const handleAddClick = () => {\n    setMainSidebar()\n  }\n  return store ? (\n    <div className='sidebar-left'>\n      <div className='sidebar'>\n        <div\n          className={classnames('chat-profile-sidebar', {\n            show: userSidebarLeft\n          })}\n        > \n        </div>\n        <Card\n          className={classnames('sidebar-content', {\n            show: sidebar === true\n          })}\n        >\n          <div className='sidebar-close-icon' onClick={handleSidebar}>\n            <X size={14} />\n          </div>\n          <div className='chat-fixed-search'>\n            <div className='d-flex align-items-center w-100'>\n              <div className='sidebar-profile-toggle' onClick={handleUserSidebarLeft}>\n                {Object.keys(userProfile).length ? (\n                  <Avatar\n                    className='avatar-border'\n                    img={userProfile.avatar}\n                    status={status}\n                    imgHeight='42'\n                    imgWidth='42'\n                  />\n                ) : null}\n              </div>\n              <InputGroup className='input-group-merge ml-1 w-100'>\n                {(userData.role === 'admin') ? <PlusCircle   onClick={handleTaskSidebar}/> : ''}\n              </InputGroup>\n            </div>\n          </div>\n          <PerfectScrollbar className='chat-user-list-wrapper list-group' options={{ wheelPropagation: false }}>\n            <h4 className='chat-list-title'>Group Chats</h4>\n            <ul className='chat-users-list chat-list media-list'>{renderChats()}</ul>\n          </PerfectScrollbar>\n        </Card>\n      </div>\n    </div>\n    \n  ) : null\n}\n\nexport default SidebarLeft\n","import { Modal, Form, ModalBody, Button,  FormGroup, Input, Label, Media } from 'reactstrap'\nimport Select, { components } from 'react-select'\nimport { useState } from 'react'\nimport { X, Star } from 'react-feather'\nimport { isObjEmpty, selectThemeColors } from '@utils'\nimport { getCompanyBrandEmployees, create } from './store/actions'\nconst GroupSidebar = props => {\n  const { companyBrandStaff, open, handleTaskSidebar,  store, dispatch, companyList, brandOptions} = props\n  const [currentCompany, setCurrentCompany] =   useState({ value: '', label: 'Select Company' })\n  const [currentBrand, setCurrentBrand] =   useState({ value: '', label: 'Select Brand' })\n  const [assignee, setAssignee] = useState({ value: '', label: '' })\n  const onSubmit = (event, errors) => {\n    event.preventDefault()\n    handleTaskSidebar()\n    const data = {}\n    data.company =  currentCompany.value\n    data.brand =  currentBrand.value\n    data.group = event.target.group.value\n    data.assignee = assignee\n    dispatch(create(data))\n  }\n\n  const AssigneeComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <Media className='align-items-center'>\n          <Media body>\n            <p className='mb-0'>{data.label}</p>\n          </Media>\n        </Media>\n      </components.Option>\n    )\n  }\n\n  const getEmployeeData = (brand) => {\n    dispatch(getCompanyBrandEmployees({company:currentCompany.value, brand:currentBrand.value}))\n  }\n  const ModalHeader = props => {\n    const {\n      children,\n      store,\n      handleTaskSidebar,\n      important,\n      setImportant,\n      dispatch    \n    } = props\n    return (\n      <div className='modal-header d-flex align-items-center justify-content-between mb-1'>\n        <h5 className='modal-title'>{children}</h5>\n        <div className='todo-item-action d-flex align-items-center'>\n          <X className='font-weight-normal mt-25' size={16} onClick={handleTaskSidebar} />\n        </div>\n      </div>\n    )\n  }\n  return (\n    <Modal\n      isOpen={open}\n      toggle={handleTaskSidebar}\n      className='sidebar-lg'\n      contentClassName='p-0'\n      modalClassName='modal-slide-in sidebar-todo-modal'\n    >\n      <Form id='form-modal-todo' className='todo-modal' onSubmit={onSubmit}>\n        <ModalHeader\n          store={store}\n          dispatch={dispatch}\n        >\n        </ModalHeader>\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n          <FormGroup>\n            <Label className='form-label' for='due-date'>Group Name</Label>\n            <Input type='text' name='group' id='group'   required/>\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-title'>Company</Label>\n            <Select \n                name=\"company\"\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={companyList}\n                value={currentCompany}\n                onChange={data => {\n                  setCurrentCompany(data)\n                  getEmployeeData(data)\n                }}\n              />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-title'>Brand</Label>\n            <Select \n                name=\"brand\"\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={brandOptions}\n                value={currentBrand}\n                onChange={data => {\n                  setCurrentBrand(data)\n                  getEmployeeData(data)\n                }}\n              />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-assignee'>\n              Assignee Employee\n            </Label>\n            <Select\n              isMulti\n              id='task-assignee'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={companyBrandStaff}\n              theme={selectThemeColors}\n              value={assignee}\n              onChange={data => setAssignee(data)}\n              components={{ Option: AssigneeComponent }}\n            />\n          </FormGroup>\n          <Button type='submit' className='mr-1' color='primary' >\n          Submit\n        </Button>\n        <Button type='reset' color='secondary' outline >\n          Cancel\n        </Button>\n        </ModalBody>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default GroupSidebar\n","import { Fragment, useState, useEffect } from 'react'\nimport Chat from './Chat'\nimport Sidebar from './SidebarLeft'\nimport classnames from 'classnames'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {  getGroups, getCompanyList, getBrandOptions } from './store/actions'\n\n// import { getTasks, updateTask, selectTask, addTask, deleteTask } from './store/actions'\n\nimport '@styles/base/pages/app-chat.scss'\nimport '@styles/base/pages/app-chat-list.scss'\nimport GroupSidebar from './GroupSidebar'\nconst AppChat = () => {\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.chat)\n  const [openTaskSidebar, setOpenTaskSidebar] = useState(false)\n  const handleTaskSidebar = () => setOpenTaskSidebar(!openTaskSidebar)\n  const [user, setUser] = useState({})\n  const [sidebar, setSidebar] = useState(false)\n  const [userSidebarRight, setUserSidebarRight] = useState(false)\n  const [userSidebarLeft, setUserSidebarLeft] = useState(false)\n\n  // ** Sidebar & overlay toggle functions\n  const handleSidebar = () => setSidebar(!sidebar)\n  const handleUserSidebarLeft = () => setUserSidebarLeft(!userSidebarLeft)\n  const handleUserSidebarRight = () => setUserSidebarRight(!userSidebarRight)\n\n  const handleOverlayClick = () => {\n    setUserSidebarLeft(false)\n  }\n  const handleUser = obj => setUser(obj)\n  const userData = JSON.parse(localStorage.getItem('userData'))[0]\n  useEffect(() => {\n    dispatch(getGroups(userData.id))\n    dispatch(getCompanyList())\n    dispatch(getBrandOptions())\n  }, [dispatch]) \n  return (\n    <Fragment>\n      <Sidebar\n        store={store}\n        sidebar={sidebar}\n        handleSidebar={handleSidebar}\n        userSidebarLeft={userSidebarLeft}\n        handleTaskSidebar={handleTaskSidebar}\n        setMainSidebar={handleUserSidebarLeft}\n        userData={userData}\n      />\n      <div className='content-right'>\n        <div className='content-wrapper'>\n          <div className='content-body'>\n            <div\n              className={classnames('body-content-overlay', {\n                show: userSidebarRight === true || sidebar === true || userSidebarLeft === true\n              })}\n              onClick={handleOverlayClick}\n            ></div>\n            <Chat\n              store={store}\n              handleUser={handleUser}\n              handleSidebar={handleSidebar}\n              userSidebarLeft={userSidebarLeft}\n              handleUserSidebarRight={handleUserSidebarRight}\n            />\n            <GroupSidebar\n              open={openTaskSidebar}\n              handleTaskSidebar={handleTaskSidebar}\n              companyList = {store?.companyList}\n              brandOptions = {store?.brandOptions}\n              companyBrandStaff = {store?.companyBrandStaff}\n              store={store}\n              \n              dispatch={dispatch}\n            /> \n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default AppChat\n"],"sourceRoot":""}