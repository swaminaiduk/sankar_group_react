{"version":3,"sources":["views/forms/validations/formik/FormikBasic.js","views/forms/validations/formik/FormikErrorMsg.js","views/forms/validations/formik/FormikValidation.js","views/forms/validations/formik/index.js","@core/components/breadcrumbs/index.js"],"names":["FormikBasic","Card","CardHeader","CardTitle","tag","CardBody","CardText","initialValues","firstName","lastName","email","onSubmit","values","setTimeout","toast","success","JSON","stringify","FormGroup","htmlFor","className","name","placeholder","type","Button","Ripple","color","SignUpSchema","Yup","shape","required","min","max","FormikErrorMsg","validationSchema","errors","touched","component","msg","formSchema","number","url","date","minlength","maxlength","FormValidation","Label","for","id","Formik","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","lg","md","sm","FormikValidation","BreadCrumbs","props","breadCrumbParent2","breadCrumbParent3","to","active","size","right","Link"],"mappings":"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","file":"static/js/136.6a0de2e0.chunk.js","sourcesContent":["import { toast } from 'react-toastify'\nimport { Formik, Field, Form } from 'formik'\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Button, FormGroup } from 'reactstrap'\n\nconst FormikBasic = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Basic</CardTitle>\n      </CardHeader>\n\n      <CardBody>\n        <CardText>\n          Getting values in and out of form state is easy using formik, you won't have to manage state to make your\n          input a controlled element.\n        </CardText>\n        <Formik\n          initialValues={{\n            firstName: '',\n            lastName: '',\n            email: ''\n          }}\n          onSubmit={values => {\n            setTimeout(() => {\n              toast.success(JSON.stringify(values, null, 2))\n            }, 500)\n          }}\n        >\n          <Form>\n            <FormGroup>\n              <label htmlFor='firstName'>First Name</label>\n              <Field className='form-control' name='firstName' placeholder='Jane' />\n            </FormGroup>\n\n            <FormGroup>\n              <label htmlFor='lastName'>Last Name</label>\n              <Field className='form-control' name='lastName' placeholder='Doe' />\n            </FormGroup>\n\n            <FormGroup>\n              <label htmlFor='email'>Email</label>\n              <Field className='form-control' name='email' placeholder='jane@acme.com' type='email' />\n            </FormGroup>\n            <Button.Ripple color='primary' type='submit'>\n              Submit\n            </Button.Ripple>\n          </Form>\n        </Formik>\n      </CardBody>\n    </Card>\n  )\n}\nexport default FormikBasic\n","import { Card, CardHeader, CardTitle, CardBody, CardText, Button, FormGroup } from 'reactstrap'\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\nimport * as Yup from 'yup'\n\nconst SignUpSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email address').required('Required'),\n  firstName: Yup.string()\n    .min(2, 'Must be longer than 2 characters')\n    .max(20, 'Nice try, nobody has a first name that long')\n    .required('Required'),\n  lastName: Yup.string()\n    .min(2, 'Must be longer than 2 characters')\n    .max(20, 'Nice try, nobody has a last name that long')\n    .required('Required')\n})\n\nconst FormikErrorMsg = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Error Msg</CardTitle>\n      </CardHeader>\n\n      <CardBody>\n        <CardText>\n          You can show error messages with formik using <code>validationSchema</code> prop with formik tag.\n        </CardText>\n        <Formik\n          initialValues={{\n            email: '',\n            firstName: '',\n            lastName: ''\n          }}\n          validationSchema={SignUpSchema}\n        >\n          {({ errors, touched }) => (\n            <Form>\n              <FormGroup>\n                <label htmlFor='firstName'>First Name</label>\n                <Field\n                  type='text'\n                  name='firstName'\n                  placeholder='Jane'\n                  className={`form-control ${errors.firstName && touched.firstName && 'is-invalid'}`}\n                />\n                <ErrorMessage name='firstName' component='div' className='field-error text-danger' />\n              </FormGroup>\n\n              <FormGroup>\n                <label htmlFor='lastName'>Last Name</label>\n                <Field\n                  type='text'\n                  name='lastName'\n                  placeholder='Doe'\n                  className={`form-control ${errors.email && touched.email && 'is-invalid'}`}\n                />\n                <ErrorMessage name='firstName'>\n                  {(msg /** this is the same as the above */) => <div className='field-error text-danger'>{msg}</div>}\n                </ErrorMessage>\n              </FormGroup>\n\n              <FormGroup>\n                <label htmlFor='email'>Email</label>\n                <Field\n                  name='email'\n                  type='email'\n                  placeholder='jane@acme.com'\n                  className={`form-control ${errors.lastName && touched.lastName && 'is-invalid'}`}\n                />\n                {/* This will render a string */}\n                <ErrorMessage name='email'>\n                  {(msg /** this is the same as the above */) => <div className='field-error text-danger'>{msg}</div>}\n                </ErrorMessage>\n              </FormGroup>\n\n              <Button.Ripple color='primary' type='submit'>\n                Submit\n              </Button.Ripple>\n            </Form>\n          )}\n        </Formik>\n      </CardBody>\n    </Card>\n  )\n}\nexport default FormikErrorMsg\n","import { Card, CardHeader, CardTitle, CardBody, FormGroup, Button, Label } from 'reactstrap'\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\nimport * as Yup from 'yup'\n\nconst formSchema = Yup.object().shape({\n  required: Yup.string().required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n  number: Yup.number().required('Required'),\n  url: Yup.string().url().required('Required'),\n  date: Yup.date().required('Required'),\n  minlength: Yup.string().min(4, 'Too Short!').required('Required'),\n  maxlength: Yup.string().max(5, 'Too Long!').required('Required')\n})\n\nconst FormValidation = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'> Validation</CardTitle>\n      </CardHeader>\n\n      <CardBody>\n        <Formik\n          initialValues={{\n            required: '',\n            email: '',\n            url: '',\n            number: '',\n            date: '',\n            minlength: '',\n            maxlength: ''\n          }}\n          validationSchema={formSchema}\n        >\n          {({ errors, touched }) => (\n            <Form>\n              <FormGroup>\n                <Label for='required'>Name</Label>\n                <Field\n                  name='required'\n                  id='required'\n                  className={`form-control ${errors.required && touched.required && 'is-invalid'}`}\n                />\n                <ErrorMessage name='required' component='div' className='field-error text-danger' />\n              </FormGroup>\n              <FormGroup>\n                <Label for='email'>Email</Label>\n                <Field\n                  type='email'\n                  name='email'\n                  id='email'\n                  className={`form-control ${errors.email && touched.email && 'is-invalid'}`}\n                />\n                <ErrorMessage name='email' component='div' className='field-error text-danger' />\n              </FormGroup>\n              <FormGroup>\n                <Label for='url'>Website URL</Label>\n                <Field name='url' id='url' className={`form-control ${errors.url && touched.url && 'is-invalid'}`} />\n                <ErrorMessage name='url' component='div' className='field-error text-danger' />\n              </FormGroup>\n              <FormGroup>\n                <Label for='number'>Number</Label>\n                <Field\n                  name='number'\n                  id='number'\n                  className={`form-control ${errors.number && touched.number && 'is-invalid'}`}\n                />\n                <ErrorMessage name='number' component='div' className='field-error text-danger' />\n              </FormGroup>\n              <FormGroup>\n                <Label for='date'>Date</Label>\n                <Field\n                  type='date'\n                  name='date'\n                  id='date'\n                  className={`form-control ${errors.date && touched.date && 'is-invalid'}`}\n                />\n                <ErrorMessage name='date' component='div' className='field-error text-danger' />\n              </FormGroup>\n              <FormGroup>\n                <Label for='minlength'>Min Length (Minimum 4 Characters)</Label>\n                <Field\n                  name='minlength'\n                  id='minlength'\n                  className={`form-control ${errors.minlength && touched.minlength && 'is-invalid'}`}\n                />\n                <ErrorMessage name='minlength' component='div' className='field-error text-danger' />\n              </FormGroup>\n              <FormGroup>\n                <Label for='maxlength'>Max Length (Maximum 5 Characters)</Label>\n                <Field\n                  name='maxlength'\n                  id='maxlength'\n                  className={`form-control ${errors.maxlength && touched.maxlength && 'is-invalid'}`}\n                />\n                <ErrorMessage name='maxlength' component='div' className='field-error text-danger' />\n              </FormGroup>\n              <Button.Ripple color='primary' type='submit'>\n                Submit\n              </Button.Ripple>\n            </Form>\n          )}\n        </Formik>\n      </CardBody>\n    </Card>\n  )\n}\nexport default FormValidation\n","import { Fragment } from 'react'\nimport { Row, Col } from 'reactstrap'\nimport Breadcrumbs from '@components/breadcrumbs'\nimport FormikBasic from './FormikBasic'\nimport FormikErrorMsg from './FormikErrorMsg'\nimport FormikValidation from './FormikValidation'\n\nconst Formik = () => {\n  return (\n    <Fragment>\n      <Breadcrumbs breadCrumbTitle='Formik' breadCrumbParent='Form' breadCrumbActive='Formik' />\n      <Row>\n        <Col lg='6' md='12'>\n          <FormikBasic />\n        </Col>\n        <Col lg='6' md='12'>\n          <FormikErrorMsg />\n        </Col>\n        <Col sm='12'>\n          <FormikValidation />\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Formik\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem tag='li' className='text-primary'>\n                  {breadCrumbParent}\n                </BreadcrumbItem>\n                {breadCrumbParent2 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent2}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                {breadCrumbParent3 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent3}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                <BreadcrumbItem tag='li' active>\n                  {breadCrumbActive}\n                </BreadcrumbItem>\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\n        <div className='form-group breadcrum-right dropdown'>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' right>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <CheckSquare className='mr-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='mr-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='mr-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='mr-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  breadCrumbTitle: Proptypes.string.isRequired,\n  breadCrumbActive: Proptypes.string.isRequired\n}\n"],"sourceRoot":""}