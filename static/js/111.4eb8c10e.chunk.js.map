{"version":3,"sources":["views/apps/chat/store/actions/index.js","views/apps/chat/UserProfileSidebar.js","views/apps/chat/Chat.js","views/apps/chat/SidebarLeft.js","views/apps/chat/GroupSidebar.js","views/apps/chat/index.js"],"names":["getGroups","emp_id","dispatch","axios","get","config","app","ApiUrl","then","res","type","data","selectChat","item","id","getGroupStaff","groupId","a","response","groupStaff","catch","err","console","log","ModalHeader","props","handleProfile","children","className","size","onClick","UserProfileSidebar","staff","isOpen","store","selectedGroup","Modal","contentClassName","modalClassName","Form","src","serverApi","logo","width","height","group","about","ModalBody","description","map","assigned","label","staffId","delete","removeGroupStaff","value","post","renderNewStaff","to","selectedUser","completedTasksCount","pendingTasksCount","groupMedia","file","CardLink","href","target","title","split","pop","renderMedia","ChatLog","chatArea","useRef","useDispatch","useState","msg","setMsg","profile","setProfile","useEffect","Object","keys","length","ReactDOM","findDOMNode","current","scrollTop","Number","MAX_SAFE_INTEGER","handleSendMsg","e","preventDefault","userData","JSON","parse","localStorage","getItem","obj","sendMsg","senderId","sender_name","name","group_id","message","changeHandler","event","formData","FormData","append","files","File","sendFile","ChatWrapper","chat","PerfectScrollbar","classnames","selectedGroupId","ref","options","wheelPropagation","chatLog","formattedChatLog","chatMessageSenderId","undefined","msgGroup","messages","forEach","index","push","time","createdAt","formattedChatData","user","side","moment","format","onSubmit","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onChange","placeholder","Label","for","hidden","Button","color","SidebarLeft","handleGroup","sidebar","userSidebarLeft","handleTaskSidebar","handleUserSidebarLeft","userProfile","active","setActive","show","Card","handleUserClick","GroupSidebar","companyBrandStaff","open","companyList","brandOptions","currentCompany","setCurrentCompany","currentBrand","setCurrentBrand","assignee","setAssignee","getEmployeeData","getCompanyBrandEmployees","company","brand","setItem","toggle","errors","newStaff","create","removeItem","FormGroup","required","isClearable","classNamePrefix","isMulti","theme","selectThemeColors","components","Option","Media","body","accept","outline","AppChat","useSelector","state","openGroupSidebar","setOpenGroupSidebar","handleGroupSidebar","openMedia","setopenMedia","setSidebar","handleSidebar","setUserSidebarLeft","Chat","selectGroup","handleMedia","media"],"mappings":"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","file":"static/js/111.4eb8c10e.chunk.js","sourcesContent":["import axios from 'axios'\nimport config from '../../../../../configs/themeConfig'\n\nexport const getGroups = (emp_id) => {\n  return dispatch => {\n    axios.get(`${config.app.ApiUrl}/group/${emp_id}`).then(res => {\n      dispatch({\n        type: 'GET_GROUPS',\n        getGroups: res.data.data\n      })\n    })\n  }\n}\n\nexport const getBrandOptions = id => {\n  return async dispatch => {\n    await axios\n      .get(`${config.app.ApiUrl}/brand/names`)\n      .then(response => {\n        dispatch({\n          type: 'BRAND_OPTIONS',\n          brandOptions: response.data.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n} \nexport const selectChat = item => {\n  return dispatch => {\n    axios.get(`${config.app.ApiUrl}/chat/${item.id}`, item.id).then(res => {\n      dispatch({ type: 'SELECTED_GROUP', data: item })\n      dispatch({ type: 'SELECT_CHAT', data: res.data.data[0] })\n    })\n  }\n} \n \nexport const sendMsg = (obj, selectedGroup) => {\n  return dispatch => {\n    axios.post(`${config.app.ApiUrl}/chat`, obj).then(res => {\n      dispatch(selectChat(selectedGroup))\n    })\n  }\n} \nexport const sendFile = (File, selectedGroup) => {\n  return dispatch => {\n    axios.post(`${config.app.ApiUrl}/upload/image/`, File).then(res => {\n      dispatch(selectChat(selectedGroup))\n    })\n  }\n} \nexport const getMedia = (selectedGroupId) => {\n  return dispatch => {\n    axios.get(`${config.app.ApiUrl}/chat/media/${selectedGroupId}`).then(res => {\n      dispatch({\n        type: 'GROUP_MEDIA',\n        data: res.data.data\n      })\n    })\n  }\n} \n\n//=======================\n\nexport const getCompanyList = id => {\n  return async dispatch => {\n    await axios\n      .get(`${config.app.ApiUrl}/company/names`)\n      .then(response => {\n        dispatch({\n          type: 'GET_COMPANY_LIST',\n          companyList: response.data.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n} \n\nexport const create = (data) => {\n  return async dispatch => {\n    await axios\n      .post(`${config.app.ApiUrl}/group`, data)\n      .then(response => {\n        dispatch({\n          type: 'NEW_GROUP',\n          newStaff: response.data\n        })\n        dispatch(getGroups(data.emp_id))\n      })\n      .catch(err => console.log(err))\n  }\n} \n\nexport const getCompanyBrandEmployees = (data) => {\n  return async dispatch => {\n    await axios\n      .post(`${config.app.ApiUrl}/staff/company-brand`, data)\n      .then(response => {\n        dispatch({\n          type: 'COMPANY_STAFF',\n          companyBrandStaff: response.data.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\nexport const getGroupStaff = (groupId) => {\n  return async dispatch => {\n    await axios\n      .get(`${config.app.ApiUrl}/group/groupEmployees/${groupId}`)\n      .then(response => {\n        dispatch({\n          type: 'GROUP_STAFF',\n          groupStaff: response.data.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n} \n\nexport const removeGroupStaff = (selectedGroup, staffId) => {\n  return async dispatch => {\n    await axios\n      .delete(`${config.app.ApiUrl}/group/${selectedGroup.id}/${staffId}`)\n      .then(response => {\n        dispatch({\n          type: 'GROUP_STAFF_DELETE',\n          groupStaff: response.data.data\n        })\n        dispatch(selectChat(selectedGroup))\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport const addStaffGroup = (data) => {\n  return async dispatch => {\n    await axios\n      .post(`${config.app.ApiUrl}/group/addStaff`, data)\n      .then(response => {\n        dispatch({\n          type: 'GROUP_STAFF_DELETE',\n          groupStaff: response.data.data\n        })\n        dispatch(selectChat(data.selectedGroup))\n      })\n      .catch(err => console.log(err))\n  }\n}\nexport const upload = (data) => {\n  return async dispatch => {\n    await axios\n      .post(`${config.app.ApiUrl}/brand/upload`, data)\n      .then(response => {\n        localStorage.setItem('glogo', response.data.data)\n        dispatch({\n          type: 'LOGO_UPLOAD',\n          logo: response.data.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}","import {  File, X, Users, Trash, Plus } from 'react-feather'\nimport { Modal, ModalBody, Form, CardLink } from 'reactstrap'\nimport '@styles/react/libs/editor/editor.scss'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport { removeGroupStaff, addStaffGroup } from './store/actions'\nimport config from '../../../configs/themeConfig'\nimport { Link } from 'react-router-dom'\nconst ModalHeader = props => {\n  const {\n    handleProfile,\n    children\n  } = props\n  return (\n    <div className='modal-header d-flex align-items-center justify-content-between mb-1'>\n      <h5 className='modal-title'>{children}</h5>\n      <div className='todo-item-action d-flex align-items-center'>\n        <X className='font-weight-normal mt-25' size={16}  onClick={handleProfile}/>\n      </div>\n    </div>\n  )\n}\nconst UserProfileSidebar = props => {\n  const {isOpen, groupStaff, handleProfile, dispatch, store} = props\n   \n  const selectedGroup = store?.selectedGroup\n  const renderStaff = (groupId, staff) => {\n    return staff?.map((item) => {\n      if (item.assigned) {\n        return (\n            <li className='pt-1 style-none' > {item.label} \n            <Trash className='text-danger pr-0' size={18} onClick={() => { dispatch(removeGroupStaff(selectedGroup, item.value)) }} /> </li>\n        ) \n      }\n    })\n  }\n  const renderNewStaff = (groupId, staff) => {\n    return staff?.map((item) => {\n      if (!item?.assigned) {\n        return (\n            <li className='pt-1 style-none' > {item.label} \n            <Plus className='text-danger pr-0' size={18} onClick={() => { dispatch(addStaffGroup({selectedGroup, item})) }} /> </li>\n        ) \n      }\n    })\n  } \n  const renderMedia = () => {\n    return store?.groupMedia?.map((item) => {\n      if (!item?.assigned) {\n        return (\n            <div className='float-left p-1' >\n              {item.file ? <CardLink  href={`${config.app.serverApi}/images/${item.file}`} target=\"_blank\" title=\"View file\" >\n                  {((item.file).split('.').pop() === 'jpeg' || (item.file).split('.').pop() === 'jpg' || (item.file).split('.').pop() === 'png') ? <img src={`${config.app.serverApi}/images/${item.file}`} width={60} height={60} /> : <File size={60}/>}\n                </CardLink> : ''}\n            </div>\n        ) \n      }\n    })\n  } \n  return (\n    <Modal\n      isOpen={isOpen}\n      className='sidebar-lg'\n      contentClassName='p-0'\n      modalClassName='modal-slide-in sidebar-todo-modal'\n    >\n      <Form id='form-modal-todo' className='todo-modal' >\n        <ModalHeader handleProfile={handleProfile}>\n        <img src={`${config.app.serverApi}/images/${selectedGroup?.logo}`} width={25} height={25}/>\n        {selectedGroup?.group} <small>{selectedGroup?.about}</small><br/>\n        </ModalHeader>\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n          <p>{selectedGroup?.description}</p>\n          <ul>{renderStaff(selectedGroup, groupStaff)}</ul>\n          <strong>Add New</strong>\n          <ul>{renderNewStaff(selectedGroup, groupStaff)}</ul>\n          <Link className='pt-2 text-success  d-flex ' to={\"./todo/completed\"}>Completed Tasks({store?.selectedUser?.completedTasksCount})</Link>\n          <Link className='pt-2 text-danger  d-flex ' to={\"./todo\"}>Pending Tasks({store?.selectedUser?.pendingTasksCount})</Link>\n          <strong className='pt-2 w-100  d-flex '>Media & Files</strong>\n          <div>{renderMedia()}</div>\n        </ModalBody>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default UserProfileSidebar\n","// ** React Imports\nimport { useState, useEffect, useRef } from 'react'\nimport ReactDOM from 'react-dom'\nimport config from '../../../configs/themeConfig'\n \n// ** Store & Actions\nimport { useDispatch } from 'react-redux'\nimport { sendMsg, sendFile, getMedia } from './store/actions'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport {  Mic, Image, Send, File, MessageSquare } from 'react-feather'\nimport UserProfileSidebar from './UserProfileSidebar'\nimport moment from 'moment'//\"YYYY/MM/DD kk:mm:ss\"\nimport {\n  CardLink,\n  Form,\n  Label,\n  InputGroup,\n  InputGroupAddon,\n  Input,\n  InputGroupText,\n  Button\n} from 'reactstrap'\nconst ChatLog = props => {\n  const { store,  getGroupStaff } = props\n  const { selectedUser, selectedGroup  } = store \n  const chatArea = useRef(null)\n  const dispatch = useDispatch()\n  const [msg, setMsg] = useState('')\n  const [profile, setProfile] = useState(false)\n  const scrollToBottom = () => {\n    const chatContainer = ReactDOM.findDOMNode(chatArea.current)\n    chatContainer.scrollTop = Number.MAX_SAFE_INTEGER\n  }\n  const handleProfile = () => setProfile(!profile)\n\n  useEffect(() => {\n    dispatch(getGroupStaff(selectedGroup?.id))\n    const selectedUserLen = Object.keys(selectedUser).length\n    if (selectedUserLen) {\n      scrollToBottom()\n    }\n  }, [selectedUser])\n\n  const formattedChatData = () => {\n    let chatLog = []\n    if (selectedUser.chat) {\n      chatLog = selectedUser.chat\n    }\n\n    const formattedChatLog = []\n    let chatMessageSenderId = chatLog[0] ? chatLog[0].senderId : undefined\n    let msgGroup = {\n      senderId: chatMessageSenderId,\n      messages: []\n    }\n    chatLog.forEach((msg, index) => {\n      if (chatMessageSenderId === msg.senderId) {\n        msgGroup.messages.push({\n          msg: msg.message,\n          file: msg.file,\n          time: msg.createdAt,\n          name: msg.sender_name\n        })\n      } else {\n        chatMessageSenderId = msg.senderId\n        formattedChatLog.push(msgGroup)\n        msgGroup = {\n          senderId: msg.senderId,\n          messages: [\n            {\n              msg: msg.message,\n              file: msg.file,\n              time: msg.createdAt,\n              name: msg.sender_name\n            }\n          ]\n        }\n      }\n      if (index === chatLog.length - 1) formattedChatLog.push(msgGroup)\n    })\n    return formattedChatLog\n  }\n\n  const renderChats = () => {\n    return formattedChatData().map((item, index) => {\n      const user = JSON.parse(localStorage.getItem('userData'))[0]\n      const side = (item.senderId === user.id) ? \"chat-right\" : \"chat-left\"\n      return (\n        <div\n          key={index}\n          className={side}\n        > \n          <div className='chat-body'>\n            {item.messages.map(chat => ( \n              <div key={chat.msg} className='chat-content'>\n                <p>{chat.msg}</p>\n                {chat.file ? <CardLink  href={`${config.app.serverApi}/images/${chat.file}`} target=\"_blank\" title=\"View file\" >\n                  {((chat.file).split('.').pop() === 'jpeg' || (chat.file).split('.').pop() === 'jpg' || (chat.file).split('.').pop() === 'png') ? <img src={`${config.app.serverApi}/images/${chat.file}`} className='w-100'/> : <File size={38}/>}\n                </CardLink> : ''}  \n                {side === \"chat-right\" ? <small className='text-right pr-1'>\n                  {moment(chat.time).format(\"DD:MM:YY kk:ss\")}\n                </small> : <small className='text-right pr-1'>\n                  {chat.name} {moment(chat.time).format(\"DD:MM:YY kk:ss\")}\n                </small>}              \n                \n              </div>\n              \n            ))}\n          </div>\n        </div>\n      )\n    })\n  } \n\n  // ** Sends New Msg\n  const [selectedFile, setSelectedFile] = useState()\n  const handleSendMsg = e => {\n    e.preventDefault()\n    const userData = JSON.parse(localStorage.getItem('userData'))[0]\n    if (msg.length && selectedGroup?.id) {\n      dispatch(sendMsg({ senderId:  userData.id, sender_name: userData.name, group_id: selectedGroup.id, message: msg }, selectedGroup))\n      setMsg('')\n    }\n  } \n  const changeHandler = (event) => {\n    event.preventDefault()\n    const userData = JSON.parse(localStorage.getItem('userData'))[0]\n    const formData = new FormData()\n    formData.append('image', event.target.files[0])\n    formData.append('senderId', userData.id)\n    formData.append('sender_name', userData.name)\n    formData.append('group_id', selectedGroup.id)\n    formData.append('msg', msg)\n    dispatch(sendFile(formData, selectedGroup))\n  }\n  const ChatWrapper = Object.keys(selectedUser).length && selectedUser.chat ? PerfectScrollbar : 'div'\n  return (\n    <div className='chat-app-window'>\n        <div className={classnames('active-chat', { 'd-none': selectedUser === null })}>\n          <div className='chat-navbar'>\n            <header className='chat-header' onClick={handleProfile}>\n              <div className='d-flex align-items-center' onClick={() => dispatch(getMedia(selectedGroup?.id))}>\n                <MessageSquare size={21}  /> {selectedGroup?.group}\n              </div>\n            </header>\n          </div>\n          <ChatWrapper ref={chatArea} className='user-chats' options={{ wheelPropagation: false }}>\n            {selectedUser.chat ? <div className='chats'>{renderChats()}</div> :  <div className='p-5 text-center text-danger'>\n              <MessageSquare size={100} className='pr-1'/>\n              <h1>Select Group for Chat</h1>\n              </div> }\n          </ChatWrapper>\n\n          <Form className='chat-app-form' onSubmit={e => handleSendMsg(e)}>\n            <InputGroup className='input-group-merge mr-1 form-send-message'>\n              <InputGroupAddon addonType='prepend'>\n                <InputGroupText>\n                  <Mic className='cursor-pointer' size={14} />\n                </InputGroupText>\n              </InputGroupAddon>\n              <Input\n                value={msg}\n                onChange={e => setMsg(e.target.value)}\n                placeholder='Type your message or use speech to text'\n              />\n              <InputGroupAddon addonType='append'>\n                <InputGroupText>\n                  <Label className='attachment-icon mb-0' for='attach-doc'>\n                    <Image className='cursor-pointer text-secondary' size={14} />\n                    <input type='file' id='attach-doc' hidden onChange={e => changeHandler(e)}  />\n                  </Label>\n                </InputGroupText>\n              </InputGroupAddon>\n            </InputGroup>\n            <Button className='send' color='primary'>\n              <Send size={14} className='d-lg-none' />\n              <span className='d-none d-lg-block'>Send</span>\n            </Button>\n          </Form>\n          <UserProfileSidebar\n          isOpen={profile}\n          handleProfile={handleProfile}\n          groupStaff={store?.groupStaff}\n          selectedGroup={selectedGroup}\n          dispatch={dispatch}\n          store={store}\n          />\n        </div>\n    </div>\n  )\n}\n\nexport default ChatLog\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { selectChat } from './store/actions'\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { X, PlusCircle } from 'react-feather'\nimport config from '../../../configs/themeConfig'\n\nimport {\n  Card,  Button \n} from 'reactstrap'\nconst SidebarLeft = props => {\n  const { handleGroup, store, sidebar,   userSidebarLeft, handleUserSidebarLeft, handleTaskSidebar} = props\n  const {userProfile, getGroups, selectedGroup } = store\n  const dispatch = useDispatch()\n  const [active, setActive] = useState({})\n  const handleUserClick = (type, item) => {\n    const id = item.id\n    dispatch(selectChat(item))\n    setActive({ type, id })\n  }\n  const renderChats = () => {\n    return getGroups.map(item => {\n      return (\n        <li\n          className={classnames({\n            active: active.type === 'chat' && active.id === item.id\n          })}\n          key={item.id}\n          onClick={() => handleUserClick('chat', item)}\n        >\n          <div className='chat-info flex-grow-1' >\n            <h5 className='mb-0'><img src={`${config.app.serverApi}/images/${item?.logo}`} width={25} height={25}/>  {item.group} </h5>\n          </div>\n        </li>\n      )\n    })\n  }\n  return store ? (\n    <div className='sidebar-left'>\n      <div className='sidebar'>\n        <div\n          className={classnames('chat-profile-sidebar', {\n            show: userSidebarLeft\n          })}\n        > \n        </div>\n        <Card\n          className={classnames('sidebar-content', {\n            show: sidebar === true\n          })}\n        >\n          <div className='sidebar-close-icon'  >\n            <X size={14} />\n          </div>\n          <div className='chat-fixed-search' >\n            <div className='d-flex align-items-center w-100 danger' >\n              <Button  color='danger' onClick={handleTaskSidebar}  >\n                  <PlusCircle size={20}/>New Group\n              </Button >\n            </div>\n          </div>\n          <PerfectScrollbar className='chat-user-list-wrapper list-group' options={{ wheelPropagation: false }}>\n            <h4 className='chat-list-title'>Group Chats</h4>\n            <ul className='chat-users-list chat-list media-list'>{renderChats()}</ul>\n          </PerfectScrollbar>\n        </Card>\n      </div>\n    </div>\n    \n  ) : null\n}\n\nexport default SidebarLeft\n","import { Modal, Form, ModalBody, Button,  FormGroup, Input, Label, Media } from 'reactstrap'\nimport Select, { components } from 'react-select'\nimport { useState } from 'react'\nimport { X, Star, Plus } from 'react-feather'\nimport { selectThemeColors } from '@utils'\nimport { getCompanyBrandEmployees, create, upload } from './store/actions'\nconst GroupSidebar = props => {\n  const { companyBrandStaff, open, handleTaskSidebar,  store, dispatch, companyList, brandOptions, userData} = props\n  const [currentCompany, setCurrentCompany] =   useState({ value: '', label: 'Select Company' })\n  const [currentBrand, setCurrentBrand] =   useState({ value: '', label: 'Select Brand' })\n  const [assignee, setAssignee] = useState({ value: '', label: 'Select...' })\n  const onSubmit = (event, errors) => {\n    event.preventDefault()\n    handleTaskSidebar()\n    const data = {}\n    data.company =  currentCompany.value\n    data.brand =  currentBrand.value\n    data.group = event.target.group.value\n    data.about = event.target.about.value\n    data.description = event.target.description.value\n    data.assignee = assignee\n    data.emp_id = userData?.id\n    data.logo = localStorage.getItem('glogo')\n    dispatch(create(data))\n    localStorage.removeItem(\"glogo\")\n  }\n\n  const AssigneeComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <Media className='align-items-center'>\n          <Media body>\n            <p className='mb-0'>{data.label}</p>\n          </Media>\n        </Media>\n      </components.Option>\n    )\n  }\n\n  const getEmployeeData = (type, data) => {\n    if (type === 'c') {\n      setCurrentCompany(data)\n    }\n    if (type === 'b') {\n      setCurrentBrand(data)\n    }\n      dispatch(getCompanyBrandEmployees({company:currentCompany.value, brand:currentBrand.value}))\n  }\n  const ModalHeader = props => {\n    const {\n      children,\n      handleTaskSidebar\n    } = props\n    return (\n      <div className='modal-header d-flex align-items-center justify-content-between mb-1'>\n        <h5 className='modal-title'>{children}</h5>\n        <div className='todo-item-action d-flex align-items-center'>\n          <X className='font-weight-normal mt-25' size={16} onClick={handleTaskSidebar} />\n        </div>\n      </div>\n    )\n  }\n  const changeHandler = (event) => {\n    event.preventDefault()\n    const formData = new FormData()\n    formData.append('logo', event.target.files[0])\n    dispatch(upload(formData))\n  }\n  return (\n    <Modal\n      isOpen={open}\n      toggle={handleTaskSidebar}\n      className='lg'\n      contentClassName='p-0'\n      modalClassName='modal-slide-in sidebar-todo-modal'\n    >\n      <Form id='form-modal-todo' className='todo-modal' onSubmit={onSubmit}>\n        <ModalHeader\n          store={store}\n          dispatch={dispatch}\n        >\n        <Plus></Plus>  New Group\n        </ModalHeader>\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n        <FormGroup>\n            <Label className='form-label' for='due-date'>Group Name</Label>\n            <Input type='text' name='group' id='group'   required/>\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='about'>About</Label>\n            <Input type='text' name='about' id='about'   />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='description'>Description</Label>\n            <Input type='text' name='description' id='description' />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-title'>Company</Label>\n            <Select \n                name=\"company\"\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={companyList}\n                value={currentCompany}\n                onChange={data => {\n                  getEmployeeData('c', data)\n                }}\n              />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-title'>Brand</Label>\n            <Select \n                name=\"brand\"\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={brandOptions}\n                value={currentBrand}\n                onChange={data => {\n                  getEmployeeData('b', data)\n                }}\n              />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-assignee'>\n              Assignee Employee\n            </Label>\n            <Select\n              isMulti\n              id='task-assignee'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={companyBrandStaff}\n              theme={selectThemeColors}\n              // value={assignee}\n              onChange={data => setAssignee(data)}\n              components={{ Option: AssigneeComponent }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for='branch'>Profile</Label>\n            <Input name='logo' type=\"file\"  onChange={event => changeHandler(event)} accept=\"image/png, image/gif, image/jpeg\" />\n          </FormGroup>\n          <Button type='submit' className='mr-1' color='primary' >\n          Submit\n        </Button>\n        <Button type='reset' color='secondary' outline >\n          Cancel\n        </Button>\n        </ModalBody>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default GroupSidebar\n","import { Fragment, useState, useEffect } from 'react'\nimport Chat from './Chat'\nimport Sidebar from './SidebarLeft'\nimport classnames from 'classnames'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {  getGroups, getCompanyList, getBrandOptions, getGroupStaff, selectGroup } from './store/actions'\n \nimport '@styles/base/pages/app-chat.scss'\nimport '@styles/base/pages/app-chat-list.scss'\nimport GroupSidebar from './GroupSidebar'\nconst AppChat = () => {\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.chat) \n  const [openGroupSidebar, setOpenGroupSidebar] = useState(false)\n  const handleGroupSidebar = () => setOpenGroupSidebar(!openGroupSidebar)\n\n\n  const [openMedia, setopenMedia] = useState(false)\n  const handleMedia = () => setopenMedia(!openMedia)\n  const [sidebar, setSidebar] = useState(false)\n  \n  const handleSidebar = () => setSidebar(!sidebar)\n  const handleOverlayClick = () => {\n    setUserSidebarLeft(false)\n  }\n  const userData = JSON.parse(localStorage.getItem('userData'))[0]\n  useEffect(() => {\n    dispatch(getGroups(userData.id))\n    dispatch(getCompanyList())\n    dispatch(getBrandOptions())\n  }, [dispatch]) \n  return (\n    <Fragment>\n      <Sidebar\n        store={store}\n        sidebar={sidebar}\n        handleSidebar={handleSidebar}\n        handleTaskSidebar={handleGroupSidebar}\n        userData={userData}\n      />\n      <div className='content-right'>\n        <div className='content-wrapper'>\n          <div className='content-body'>\n            <div  onClick={handleOverlayClick} ></div>\n            <Chat\n              store={store}\n              handleSidebar={handleSidebar}\n              getGroupStaff={getGroupStaff}\n              selectedGroup={store?.selectGroup}\n            />\n            <GroupSidebar\n              open={openGroupSidebar}\n              handleTaskSidebar={handleGroupSidebar}\n              companyList = {store?.companyList}\n              brandOptions = {store?.brandOptions}\n              companyBrandStaff = {store?.companyBrandStaff}\n              store={store}   \n              userData={userData}           \n              dispatch={dispatch}\n              handleMedia={handleMedia}\n              media={store?.groupMedia}\n            />  \n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default AppChat\n"],"sourceRoot":""}